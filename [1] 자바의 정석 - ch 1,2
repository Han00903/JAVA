[1] 자바의 정석 - ch 1,2

자바의 특징
1. 배우기 쉬운 객체지향 언어: 자바는 객체지향 프로그래밍(OOP)를 기반으로 하여 코드의 재사용성과 유지보수성을 높여줍니다. 클래스와 객체를 사용해 프로그램을 구성합니다.
2. 자동 메모리 관리: 자바는 자동으로 메모리를 관리해주는 가비지 컬렉터(GC)를 제공합니다. 사용하지 않는 객체를 자동으로 정리해 메모리 누수를 방지합니다.
3. 멀티 쓰레드 지원: 자바는 멀티 쓰레드를 기본적으로 지원하여 동시에 여러 작업을 처리할 수 있는 기능을 제공합니다. 이를 통해 개발자는 많은 기능을 손쉽게 구현할 수 있습니다.
4. 운영체제에 독립적인 실행: 자바는 JVM을 통해 운영체제와 독립적으로 실행됩니다. 이는 자바 프로그램을 한 번 작성하면 여러 운영체제에서 실행할 수 있게 해줍니다.

JAVA API 문서
- JAVA API: JAVA API는 자바 언어로 프로그램을 작성하는데 필요한 주요 클래스와 메서드를 제공하는 라이브러리입니다.
- JAVA API 문서: JAVA API 문서는 제공되는 각 클래스와 메서드의 사용법과 설명을 담고 있는 HTML 형식의 문서로 자바 개발자는 각 클래스나 메서드가 무엇을 하고 어떻게 사용해야 하는지 알 수 있습니다.

변수
1. 변수란? 변수는 데이터를 저장할 수 있는 메모리 공간으로 프로그램에서 값을 저장하고 읽어오는 데 사용됩니다.
2. 변수의 선언: 변수를 선언하려면 먼저 변수의 타입을 지정해야 하며 이후 변수 이름을 지정합니다. 
3. 변수 초기화: 변수 초기화는 선언된 변수에 처음으로 값을 저장하는 과정입니다.
4. 변수의 종류
  - 클래스 변수: 클래스 자체에 속하며 모든 인스턴스에서 공유됩니다.
  - 인스턴스 변수: 클래스의 각 객체가 가지고 있는 변수입니다.
  - 지역 변수: 메서드 내에서 선언된 변수로 메서드가 실행될 떄만 존재합니다. 지역 변수는 반드시 초기화 후 사용되어야 합니다.
5. 변수 타입
  - 문자: char (ex. 'a', '1')
  - 정수: byte, short, int, long (ex. 10, 1000)
  - 실수: float, double (ex. 3.14, 5.67)
  - 논리값: boolean (ex. true, false)

상수와 리터럴
1. 상수: 상수는 한번 값을 할당하면 변경할 수 없는 변수입니다. (ex.final int MAX_VALUE = 100;에서 MAX_VALUE는 상수)
2. 리터럴: 리터럴은 그 자체로 값을 나타내는 표현입니다. (ex. 10은 정수 리터럴, 'a'는 문자 리터럴)

변수와 리터럴의 타입 불일치
-> 변수와 리터럴의 타입이 일치하지 않으면 오류가 발생합니다.
1. 변수 타입 > 리터럴 타입: long타입 변수에 int값을 할당하는 것은 문제가 되지 않아 자바는 자동으로 변환합니다.
2. 변수 타입 < 리터럴 타입: int변수에 long값을 할당하려면 명시적으로 타입을 반환해야 합니다.

변수의 종류
1. 기본형 타입 (Primitive Types): 자바의 기본형 타입은 8개로 실제 값을 저장합니다.
  - boolean, char, byte, short, int, long, float, double
2. 참조형 타입 (Reference Types): 참조형 타입은 객체의 주소를 저장합니다.
  - String이나 System 같은 클래스 객체를 저장

출력과 입력
1. printf(): 자바에서 형식화된 출력을 할 때 printf()를 사용
2. Scanner: Scanner 클래스는 사용자가 입력한 데이터를 읽어오는 데 사용되며 Scanner scanner = new Scanner(System.in);을 사용하여 콘솔에서 데이터를 입력받을 수 있습니다.

오버플로우와 타입 변환
1. 오버플로우: 데이터 타입의 표현 범위를 넘어서는 값을 저장할 경우 오버플로우가 발생합니다.
2. 타입 변환
  - 문자와 숫자 간 변환: 문자 '0'에 숫자 0을 더하면 문자 0의 ASCII 값인 48이 더해짐
  - 숫자를 문자열로 변환: 숫자를 문자열로 변환하려면 빈 문자열을 더하면 됩니다.(ex. String.valueOf(123), 123 + "")
  - 문자열을 숫자로 변환: Integer.parseInt(), Double.parseDouble() 등을 사용하여 문자열을 숫자로 변환할 수 있습니다. 
  - 문자열을 문자로 변: charAt() 메서드를 사용하여 문자열에서 문자로 변환할 수 있습니다. (ex.String s = "abc"; char c = s.charAt(0);)
